import logging
import random
import sys

from PySide6 import QtWidgets, QtCore
from PySide6.QtWidgets import QDialog, QApplication


class Window(QDialog):
    def __init__(self, ad_slogan, parent=None):
        super(Window, self).__init__(parent)  # study this line deeper
        self.setWindowTitle(ad_slogan)

        self.label = QtWidgets.QLabel(ad_slogan)
        layout = QtWidgets.QVBoxLayout(self)
        layout.addWidget(self.label)
        self.setLayout(layout)

    def closeEvent(self, event):
        # This line is used to ignore the close using the close buttons

        event.ignore()


class Adware(QApplication):
    def __init__(self, args):
        super(Adware, self).__init__(args)

    @property
    def popUpSlogan(self):
        # This is what  will be shown when Malware pops up
        return (
            "Nipee Bloooooo",
            "I want Blooo",
            "Babe, yaaani hunipei bloo leo (sad face)",
            "Milk and biscuits"
        )

    def AdWindow(self, slogan):
        # Window for Advertisement
        window = Window(ad_slogan=slogan)
        window.show()
        return window

    def showAd(self):
        ads = []

        for slogan in self.popUpSlogan:
            ad_window = self.AdWindow(slogan)
            x_coordinate, y_coordinate = random.randint(1, 100), random.randint(1, 100)
            ad_window.move(x_coordinate, y_coordinate)
            ads.append(ad_window)
        return ads


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    adware = Adware(sys.argv)
    ads = adware.showAd()
    sys.exit(adware.exec())


# class MyWidget(QtWidgets.QWidget):
#     def __init__(self):
#         super().__init__()
#         self.hello = ["Niaje", "Hello", "Hola!", "Bonjour", "Buda Rada?"]
#         self.button = QtWidgets.QPushButton("click me!")
#         self.text = QtWidgets.QLabel("Hello world", alignment=QtCore.Qt.AlignCenter)
#         self.layout = QtWidgets.QVBoxLayout(self)
#         self.layout.addWidget(self.text)
#         self.layout.addWidget(self.button)
#         self.button.clicked.connect(self.magic)
#
#     @QtCore.Slot()
#     def magic(self):
#         self.text.setText(random.choice(self.hello))
#
#
# if __name__ == "__main__":
#     app = QtWidgets.QApplication([])
#     widget = MyWidget()
#     widget.resize(800, 600)
#     widget.show()
#     sys.exit(app.exec())
